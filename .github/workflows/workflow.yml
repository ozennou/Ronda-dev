name: CI Workflow

on:
    push:
        branches: [ "main" ]
        paths-ignore: ["**/*.md"]
    pull_request:
        branches: [ "main" ]
        paths-ignore: ["**/*.md"]

jobs:
    analyze:
      name: CodeQL Analysis
      runs-on: ubuntu-latest
      permissions:
        actions: read
        contents: read
        security-events: write

      strategy:
        fail-fast: false
        matrix:
          language: [ 'python' ]

      steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Initializes the CodeQL tools for scanning
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          # If you want to specify custom queries, uncomment and modify:
          # queries: security-and-quality

      # Attempts to auto-build the code
      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      # Alternatively, if you have a specific build process, replace Autobuild with:
      # - name: Setup Python
      #   uses: actions/setup-python@v4
      #   with:
      #     python-version: '3.9'
      # 
      # - name: Install dependencies
      #   run: |
      #     python -m pip install --upgrade pip
      #     pip install -r requirements.txt
      #     # Add any build steps specific to your project

      # Performs the analysis
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{matrix.language}}"

      # Optional: Upload results to GitHub Security tab
      - name: Upload CodeQL Results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: github/codeql/results/sarif-results/python-results.sarif

    build:

        runs-on: ubuntu-24.04

        steps:
            - uses: actions/checkout@v4
            - name: Create .env file
              run: |
                  cat << EOF > .env
                  POSTGRES_USER=${{ secrets.POSTGRES_USER }}
                  POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
                  REDIS_PASSWD=${{ secrets.REDIS_PASSWD }}
                  EOF
            - name: Build and Run
              run: |
                docker compose up -d
                docker ps
            - name: health check 
              run: |
                sleep 10
                curl --fail http://localhost:8000/healthz 1>&2 2>/dev/null

    test:
        runs-on: ubuntu-24.04
        needs: build
        strategy:
            # max-parallel: 3
            matrix:
              python-version: [3.9]
        steps:
            - uses: actions/checkout@v4
            - name: Set up python ${{ matrix.python-version }}
              uses: actions/setup-python@v3
              with:
                python-version: ${{ matrix.python-version }}
            - name: Install dependencies
              run: |
                cd src
                python -m pip install --upgrade pip
                pip install -r Requirements.txt
            - name: Run tests
              run: python src/manage.py test

    push_image:
        runs-on: ubuntu-24.04
        needs: test
        steps:
            - uses: actions/checkout@v4
            - name: Login to DockerHub
              uses: docker/login-action@v3
              with:
                username: ${{ vars.DOCKERHUB_USERNAME }}
                password: ${{ secrets.DOCKERHUB_TOKEN }}
            - name: Build
              run: docker compose build
            - name: push docker image
              run: |
                docker tag ozennou/ronda_game:latest ozennou/ronda_game:0.0.${GITHUB_RUN_NUMBER}v
                docker push ozennou/ronda_game:0.0.${GITHUB_RUN_NUMBER}v
                docker push ozennou/ronda_game:latest
